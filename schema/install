#!/usr/bin/env ruby

# Optionally specify path of file and we can overwrite it
name = ARGV.shift.to_s

if !File.directory?("scripts")
   puts "** ERROR: Run script from the schema directory of your project"
   exit(1)
end

def assert_installed(cmd, url)
  if !system("which %s > /dev/null" % cmd)
    puts "** ERROR: Please install %s: %s" % [cmd, url]
    exit(1)
  end
end

def format(path)
  path.sub(/.*lib-postgresql\//, 'https://github.com/flowcommerce/lib-postgresql/blob/master/')
end

def different?(updated, original)
  if !File.exists?(updated)
    true
  elsif !File.exists?(original)
    true
  else
    IO.read(updated).strip != IO.read(original).strip
  end
end
  
def run_command(cmd, action, path="scripts")
  puts cmd
  if !system(cmd)
    puts "** ERROR: command failed"
    exit(1)
  end
  puts "Example commit:"
  puts " git commit -m '%s lib-postgresql scripts' %s" % [action, path]
end

HEADER = "-- File created automatically by #{format(__FILE__)}"

assert_installed("sem-add", "https://github.com/mbryzek/schema-evolution-manager")

dir = File.dirname(__FILE__)
tmp = "lib-postgresql-schema-tmp.sql"

def schema_install?(path)
  IO.readlines(path).first.strip == HEADER
end

begin
  File.open(tmp, "w") do |out|
    out << "#{HEADER}\n\n"
  
    Dir.glob("#{dir}/*.sql").sort.each do |path|
      out << "\n-- Start of file #{format(path)}\n"
      out << IO.read(path)
    end
  end

  # Search the scripts directory to find the latest installed version -
  # this allows us to only commit the schema files if there has been a
  # change.
  if name.empty?
    all_scripts = Dir.glob("scripts/*.sql").sort
    if last_schema_filename = all_scripts.select { |path| schema_install?(path) }.last
      if !different?(tmp, last_schema_filename)
        puts "There have been no changes since last schema intallation at %s" % last_schema_filename
        exit(0)
      end
      
      puts "The last schema intallation was %s" % last_schema_filename
      print "Would you like to overwrite this file? (y/n) "
      answer = nil
      while answer.to_s.strip == ""
        answer = gets
        if answer.downcase.match(/^y/)
          name = last_schema_filename
        elsif answer.downcase.match(/^n/)
          break
        else
          print "y/n: "
          answer = nil
        end
      end
    end
  end

  if name == ""
    run_command("sem-add #{tmp}", "Installed")
  elsif different?(tmp, name)
    run_command("cp #{tmp} #{name}", "Updated", name)
  else
    puts "No changes compared to #{name}"
  end
ensure
  if File.exists?(tmp)
    File.delete(tmp)
  end
end
